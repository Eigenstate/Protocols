#!/bin/bash

function usage {
  echo "Usage: $0 -r <revision> -d <directory> -p <prmtop>"
  echo "       -j <job name> -q <queue> -s <speed> -t <time>"
  echo "       -n <# replicates> [-c <inpcrd>]"
  echo "       [--restraints <restraints>] [--production]"
  echo "       [--hmr] [--isotropic] [--msm <repnum>]"
  echo "       [--gpus <n>]"
  echo
  echo "<revision> = Simulation revision to write"
  echo "<directory> = Root directory of simulation. Defaults to \$PWD"
  echo "<prmtop> = Path to prmtop. Assumes inpcrd has same prefix"
  echo "<queue> = rondror | rondror_high | owners | shared"
  echo "<speed> = Simulation speed, in ns/day"
  echo "<time> = Total desired time, in ns"
  echo "<restraints> = Residues to restrain, comma or - separated"
  echo "<inpcrd> = Input coordinates to use, if not default named"
  echo "--production to submit new production runs only"
  echo "--hmr for increased timestep"
  echo "--isotropic for isotropic pressure control"
  echo "--anisotropic for anisotropic pressure control"
  echo "--semiisotropic for semiisotropic pressure control"
  echo "--resubmit to hook into resubmit script"
  echo "--msm <rep> for MSM mode: no output, and no minimization. Specify replicate number."
  echo "--gpus <n> for number of GPUs per simulation. Defaults to 2"
  exit 1
}

declare -a prodjob # Global variable for all production jobs

# Starts production jobs
# $1 = replicate number
# $2 = equilibration job id, if started
function start_production {
  if [[ $msm -eq 0 ]]; then
      echo "Replicate: $1"
  fi
  r="$1"
 
  if [[ -z $2 ]]; then
    depline="singleton"
  else
    depline="singleton,afterok:$2"
  fi
    if [[ $msm -eq 0 ]]; then
        echo "  Replicate $r..."
    fi

    sed -e "s@(REV)@$rev@g" \
        -e "s@(PRMTOP)@$prmtop@g" \
        -e "s@(DIR)@$dir@g" \
        -e "s@(EQDIR)@$eqdir@g" \
        -e "s@(NAM)@$name@g" \
        -e "s@(NOW)@$(date)@g" \
        -e "s@(INP)@$prodir@g" \
        -e "s@(QOS)@$qos@g" \
        -e "s@(PART)@$part@g" \
        -e "s@(REP)@$r@g" \
        -e "s@(P2P)@$inpdir/gpuP2PCheck@g" \
        -e "s@(WHOAMI)@$(whoami)@g" \
        -e "s@(RUNTIME)@$runtime@g" \
        -e "s@(REF)@$reference@g" \
        -e "s@(FUNFILE)@$inpdir/functions@g" \
        -e "s@(GPUS)@$ngpus@g" \
        < "${inpdir}/production/PROTOCOL_skelly" > "$dir/production/$rev/$r/PROTOCOL.sh"

    # Remove titan x constraint if running on owners
    if [[ "$part" == "owners" ]]; then
        sed -i -e "/titanx/d" "$dir/production/$rev/$r/PROTOCOL.sh"
    fi

    chmod +x "$dir/production/$rev/$r/PROTOCOL.sh"
    # Submit appropriate number of singleton runs
    cd "$dir/production/$rev/$r"
    for ((i=0;i<$((nruns-1));i++)); do
      prodjob+=($(sbatch --dependency="$depline" "PROTOCOL.sh" | awk '{print $4}'))
    done
    cd - > /dev/null

    if [[ "$resubmit" == 1 ]]; then
        echo "Adding to resubmit queue..."
        if [[ "$prodonly" == "1" ]]; then
            /usr/bin/env python $PI_HOME/software/resubmit/resubmit.py -u \
               "$dir/production/$rev/$r/mdinfo" \
               "$dir/production/$rev/$r/PROTOCOL.sh" \
               "$nsec"
        else
            /usr/bin/env python $PI_HOME/software/resubmit/resubmit.py \
               "$dir/production/$rev/$r/mdinfo" \
               "$dir/production/$rev/$r/PROTOCOL.sh" \
               "$nsec"
        fi
    fi

    return 0
}

# Set default options
rev=""
prmtop=""
inpcrd=""
name=""
qos=""
speed=""
nsec=""
rep=""
restraints=""
dir="$PWD"
prodonly=0
hmr=0
pressure=""
resubmit=0
msm=0
ngpus=2

# Parse input arguments
while [[ "$#" > 0 ]]; do
  key="$1"
  case $key in
    "-r"|"--revision")
    rev="$2"
    shift
    ;;
    "-d"|"--directory")
    dir="$2"
    shift
    ;;
    "-p"|"--prmtop")
    prmtop="$2"
    shift
    ;;
    "-c"|"--inpcrd")
    inpcrd="$2"
    shift
    ;;
    "-j"|"--name")
    name="$2"
    shift
    ;;
    "-n"|"--nrep")
    rep="$2"
    shift
    ;;
    "-q"|"--queue")
    qos="$2"
    shift
    ;;
    "-s"|"--speed")
    speed="$2"
    shift
    ;;
    "-t"|"--time")
    nsec="$2"
    shift
    ;;
    "--restraints")
    restrainres="$2"
    shift
    ;;
    "--production")
    prodonly=1
    ;;
    "--hmr")
    hmr=1
    ;;
    "--semiisotropic")
    pressure="ntp=3, csurften=3, gamma_ten=0.,"
    ;;
    "--isotropic")
    pressure="ntp=1,"
    ;;
    "--anisotropic")
    pressure="ntp=2,"
    ;;
    "--resubmit")
    resubmit=1
    ;;
    "--msm")
    msm="$2"
    shift
    ;;
    "--gpus")
    ngpus="$2"
    shift
    ;;
    *)
    usage
    ;;
  esac
  shift
done

# Sanity check for msm and rep
if [[ $msm -ne 0 ]]; then
    if [[ ! -z $rep ]]; then
        echo "WARNING: Cannot specify msm mode and number of replicates"
        echo "         Ignoring replicate number"
    #    usage
    fi
    rep=$msm
fi

# Check for mandatory options
if [[ -z $rev || -z $rep || -z $name || -z $speed || -z $nsec ]]; then
    echo "ERROR: Missing a mandatory option"
    echo "       Do you have -r, -j, -s, -t, and -n ?"
    usage
fi

if [[ -z $pressure ]]; then
    echo "ERROR: Missing a pressure options"
    echo "       You need to state which pressure control to use"
fi

# Check prmtop (and inpcrd if needed) are valid files
if [[ -z "$inpcrd" ]]; then
    inpcrd=${prmtop%.prmtop}.inpcrd
fi

if [[ ! -e "$prmtop" ]]; then
    echo "ERROR: Cannot find prmtop file: '$prmtop'"
    exit 1
fi
prmtop=$(readlink -m $prmtop)
inpcrd=$(readlink -m $inpcrd)

if [[ $prodonly -eq 0 && ! -e "$inpcrd" ]]; then
    echo "ERROR: Cannot find inpcrd file: '$inpcrd'"
    exit 1
fi

# Set runtime and QOS according to allowed runtime
if [[ "$qos" == "rondror" || "$qos" == "rondror_high" ]]; then
    part="rondror"
    runtime=8
elif [[ "$qos" == "owners" ]]; then
    qos="normal"
    part="owners"
    runtime=48
elif [[ "$qos" == "shared" ]]; then
    qos="normal"
    part="gpu"
    runtime=48
else
    echo "ERROR: Invalid queue choice '$qos'" 
    usage
    exit 1
fi

# Set the queue for minimization
minqos="$qos"
if [[ "$qos" == "owners"  && "$prodonly" == "0" ]]; then
    echo "Minimizing on rondror_high"
    minqos="rondror_high"
fi

# Set the equilibration time depending on the number of GPUs
if [[ "$ngpus" == "1" ]]; then
    eqtime=12
else
    eqtime=8
fi

# Set up directory structure for equilibration
if [[ $msm -eq 0 ]]; then
    eqdir="$dir/equilibration/$rev"
else # MSM case gets an equilibration for this replicate too
    eqdir="$dir/equilibration/$rev/$rep"
fi

# Remove write permissions from prmtop and input coordinates
chmod a-w "$prmtop"
chmod a-w "$inpcrd"

# Calculate number of steps to run with given speed and queue jobstep size
if [[ $hmr == "0" ]]; then
    dt=0.0025
    heatwrite="ntpr=100, ntwr=10000, ntwx=1000,"
    eqwrite="ntpr=5000, ntwr=5000, ntwx=10000,"
    prodwrite="ntpr=25000, ntwr=80000, ntwx=80000,"
else
    dt=0.004
    heatwrite="ntpr=50, ntwr=5000, ntwx=500,"
    eqwrite="ntpr=3125, ntwr=3125, ntwx=6250,"
    prodwrite="ntpr=15625, ntwr=50000, ntwx=50000,"
fi

nstep=$(echo "scale=0; $runtime * $speed * 1000 / $dt / 24" | bc) # number of steps
stept=$(echo "scale=0; $runtime * $speed / 24" | bc ) # number of nanoseconds
if [[ "$resubmit" == "1" ]]; then
    nruns=5
else
    nruns=$(echo $(printf %.0f $(echo "($nsec/$stept+ 0.5)/1" | bc -l))) # gross bc it needs to round up
fi
if [[ "$nruns" -eq "0" ]]; then
    echo "ERROR: Submitting 0 runs? Something wrong"
    exit 1
fi

if [[ $msm -eq 0 ]]; then
    echo "INFO: Submitting $nruns jobsteps"
fi

# Check for skeleton protocols in input files directory
# These should all be here if this script is properly configured
inpdir="/share/PI/rondror/software/submit_new/"
if [[ ! -e "$inpdir/minimization/PROTOCOL_skelly" || \
      ! -e "$inpdir/equilibration/PROTOCOL_skelly" || \
      ! -e "$inpdir/production/PROTOCOL_first_skelly" || \
      ! -e "$inpdir/production/PROTOCOL_continue_skelly" ]]; then
    echo "ERROR: Cannot find skeleton input files. Looked in:"
    echo "       $inpdir"
    exit 1
fi


# Restraints
if [[ ! -z "$restrainres" ]]; then
  restraint="ntr=1,\n  restraintmask=':${restrainres} \& !@H=',\n  restraint_wt=5.0,\n"
else
  restraint=""
fi

# Create directory structure if nonexistent
# Keep everything on scratch, and just a symlink to share
if [[ $msm -eq 0 ]]; then
    echo "Checking directory structure"
fi
if [[ ! -d "$dir" ]]; then mkdir -p $dir; fi
if [[ ! -d "$dir/minimization/$rev" ]]; then mkdir -p "$dir/minimization/$rev"; fi
if [[ ! -d "$dir/equilibration/$rev" ]]; then mkdir -p "$dir/equilibration/$rev"; fi
#if [[ ! -d "${dir/scratch/share}" ]]; then ln -s "$dir" "${dir/scratch/share}"; fi

# Make production replicate directories
if [[ $msm -eq 0 ]]; then
    for ((r=1;r<=$rep;r++)); do
      if [[ ! -d "${dir}/production/$rev/$r" ]]; then mkdir -p "${dir}/production/$rev/$r"; fi
    done
    echo "Ok"
    echo "Checking for overwrites..."
else
    if [[ ! -d "${dir}/minimization/$rev/$msm" ]]; then mkdir -p "${dir}/minimization/$rev/$msm"; fi
    if [[ ! -d "${dir}/equilibration/$rev/$msm" ]]; then mkdir -p "${dir}/equilibration/$rev/$msm"; fi
    if [[ ! -d "${dir}/production/$rev/$msm" ]]; then mkdir -p "${dir}/production/$rev/$msm"; fi
fi

# Check that the revisions won't overwrite anything
# Don't check for production files since they are auto-appended
if [[ $prodonly == "0" ]]; then
    if [[ $msm -eq 0 ]]; then
        if [[ -e "$dir/minimization/$rev/min1.mdout" || \
              -e "$dir/equilibration/$rev/Eq_1.mdout" || \
              -e "$dir/equilibration/$rev/$rep/Eq_1.mdout" ]]; then
            echo "ERROR: Output files found from revision $rev. Won't overwrite."
            exit 1
        fi
    else
        if [[ -e "$dir/minimizatino/$rev/$msm/min1.mdout" || \
              -e "$dir/equilibration/$rev/msm/Eq_1.mdout" || \
              -e "$dir/equilibration/$rev/$msm/Eq_1.mdout" ]]; then
            echo "ERROR: Output files from revision $rev, rep $msm. Won't overwrite."
            exit 1
        fi
    fi
fi
if [[ $msm -eq 0 ]]; then
    echo "Ok"
fi
# Reference is initial minimized coordinates -R (7Mar16)
reference="$inpcrd"

# Create input files
# Use @ in sed separator because '/' is in some of these variables
if [[ $prodonly -eq 0 ]]; then

    # MINIMIZATION

    if [[ $msm -eq 0 ]]; then
        echo "Creating jobs:"
        echo "Minimization..."
        mindir="$dir/minimization/$rev"
    else
        mindir="$dir/minimization/$rev/$rep"
    fi

    # Copy input files
    cp $inpdir/minimization/*.mdin $mindir

    # Create protocol file
    sed -e "s@(REV)@$rev@g" \
        -e "s@(PRMTOP)@$prmtop@g" \
        -e "s@(INPCRD)@$inpcrd@g" \
        -e "s@(NAM)@$name@g" \
        -e "s@(NOW)@$(date)@g" \
        -e "s@(QOS)@$minqos@g" \
        -e "s@(PART)@$part@g" \
        -e "s@(INP)@$mindir@g" \
        -e "s@(DIR)@$dir@g" \
        -e "s@(WHOAMI)@$(whoami)@g" \
        -e "s@(REF)@$inpcrd@g" \
        -e "s@(FUNFILE)@$inpdir/functions@g" \
        < "$inpdir/minimization/PROTOCOL_skelly" > "$mindir/PROTOCOL.sh"

    chmod +x "$mindir/PROTOCOL.sh"
    cd "$mindir"
    minjob=$(sbatch "PROTOCOL.sh" | awk '{print $4}')
    cd - > /dev/null
fi

if [[ $prodonly -eq 0 ]]; then
    # EQUILIBRATION

    # Create heating mdin files. These are a bit different than other
    # equlibration files so do them separately
    # First is 12.5 ps, then second is 125 ps
    sed -e "s/(DT)/$dt/g" \
        -e "s/(HEATWRITE)/$heatwrite/g" \
        -e "s/(NSTEPS)/$(echo "scale=0; 12.5/$dt" | bc)/g" \
        < "$inpdir/equilibration/Heat_1.mdin" > "$eqdir/Heat_1.mdin"
    sed -e "s/(DT)/$dt/g" \
        -e "s/(PRESSURE)/$pressure/g" \
        -e "s/(HEATWRITE)/$heatwrite/g" \
        -e "s/(NSTEPS)/$(echo "scale=0; 125/$dt" | bc)/g" \
        < "$inpdir/equilibration/Heat_2.mdin" > "$eqdir/Heat_2.mdin"

    # Now do the equilibration mdin files, each is 2 ns
    cd "$inpdir/equilibration/"
    for i in $(ls Eq*mdin); do
        sed -e "s/(DT)/$dt/g" \
            -e "s/(PRESSURE)/$pressure/g"\
            -e "s/(EQWRITE)/$eqwrite/g" \
            -e "s/(NSTEPS)/$(echo "scale=0; 2000/$dt" | bc)/g" \
            < "$i" > "$eqdir/$i"
    done
    cd - > /dev/null

    # Equilibration
    cd $eqdir
    if [[ $msm -eq 0 ]]; then
        echo "Equilibration..."
    fi

    sed -e "s@(REV)@$rev@g" \
        -e "s@(MINNUM)@$minjob@g" \
        -e "s@(PRMTOP)@$prmtop@g" \
        -e "s@(RST)@$mindir/min3.rst@g" \
        -e "s@(DIR)@$dir@g" \
        -e "s@(NAM)@$name@g" \
        -e "s@(NOW)@$(date)@g" \
        -e "s@(QOS)@$qos@g" \
        -e "s@(PART)@$part@g" \
        -e "s@(INP)@$eqdir@g" \
        -e "s@(P2P)@$inpdir/gpuP2PCheck@" \
        -e "s@(WHOAMI)@$(whoami)@g" \
        -e "s@(REF)@$reference@g" \
        -e "s@(FUNFILE)@$inpdir/functions@g" \
        -e "s@(GPUS)@$ngpus@g" \
        -e "s@(RUNTIME)@$eqtime@g" \
        < "$inpdir/equilibration/PROTOCOL_skelly" > "$eqdir/PROTOCOL.sh"

    chmod +x "$eqdir/PROTOCOL.sh"
    eqjob=$(sbatch "PROTOCOL.sh" | awk '{print $4}')
    cd - > /dev/null
fi

# SET UP PRODUCTION RUNS 
prodir="$dir/production/$rev"

# Write settable variables in local copy of input files
# Use / as a separator here since there can be a '@' in restraint string
# Nsteps is for 5 ns of runtime in the production final equilibration
sed -e "s/(RESTRAINT)/$restraint/g" \
    -e "s/(NSTEPS)/$(echo "scale=0; 5000/$dt" | bc)/g" \
    -e "s/(PRESSURE)/$pressure/g" \
    -e "s/(DT)/$dt/g" \
    -e "s/(EQWRITE)/$eqwrite/g" \
    < "$inpdir/production/Eq_6.mdin" > "$prodir/Eq_6.mdin"

# Same thing for the production file, using calculated nsteps
# for the desired runtime
sed -e "s/(RESTRAINT)/$restraint/g" \
    -e "s/(NSTEPS)/$nstep/g" \
    -e "s/(PRESSURE)/$pressure/g" \
    -e "s/(DT)/$dt/g" \
    -e "s/(PRODWRITE)/$prodwrite/g" \
    < "$inpdir/production/Prod_skelly.mdin" > "$prodir/Prod_${runtime}h.mdin"

if [[ $msm -eq 0 ]]; then
    echo
    echo "Created production input files in $prodir"
    echo "Edit these files to your specification now."
    echo "Press enter to continue"
    read sheepity
fi

# SUBMIT PRODUCTION RUNS
if [[ $msm -eq 0 ]]; then
    echo "Not msming.. submitting $rep replicates"
    for ((x=1;x<=$rep;x++)); do
        echo " On $x"
        start_production $x $eqjob
    done
else
    start_production $msm $eqjob
fi

if [[ $msm -eq 0 ]]; then
    echo "Ok"

    # Print a summary
    echo
    echo "---------- SUBMISSION SUMMARY ----------"
    echo " NAME: $name"
    if [[ $prodonly == "0" ]]; then
        echo " MINIMIZATION:"
        echo "    $minjob"
        echo " EQUILIBRATION: "
        echo "    $eqjob"
    fi
    echo " PRODUCTION:"
    for j in ${prodjob[@]}; do
      echo "    $j"
    done
    echo "----------------------------------------"
else
    for j in ${prodjob[@]}; do
        echo "$j"
    done
fi

