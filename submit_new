#!/bin/bash

function usage {
  echo "Usage: $0 -r <revision> -d <directory> -p <prmtop>"
  echo "       -j <job name> -q <queue> -s <speed> -t <time>"
  echo "       -n <# replicates>"
  echo "       [--restraints <restraints>] [--production]"
  echo "       [--hmr]"
  echo
  echo "<revision> = Simulation revision to write"
  echo "<directory> = Root directory of simulation. Defaults to \$PWD"
  echo "<prmtop> = Path to prmtop. Assumes inpcrd has same prefix"
  echo "<queue> = rondror | rondror_high | owners | shared"
  echo "<speed> = Simulation speed, in ns/day"
  echo "<time> = Total desired time, in ns"
  echo "<restraints> = Residues to restrain, comma or - separated"
  echo "--production to submit new production runs only"
  echo "--hmr for increased timestep"
  exit 1
}

# Check we're on Sherlock
if [[ $(hostname) != *"sherlock"* ]]; then
    echo "Run script on Sherlock, not $(hostname)!"
    exit 1
fi

# Set default options
rev=""
prmtop=""
name=""
qos=""
speed=""
nsec=""
rep=""
restraints=""
dir="$PWD"
prodonly=0
hmr=0

# Parse input arguments
while [[ "$#" > 0 ]]; do
  key="$1"
  case $key in
    "-r"|"--revision")
    rev="$2"
    shift
    ;;
    "-d"|"--directory")
    dir="$2"
    shift
    ;;
    "-p"|"--prmtop")
    prmtop="$2"
    shift
    ;;
    "-j"|"--name")
    name="$2"
    shift
    ;;
    "-n"|"--nrep")
    rep="$2"
    shift
    ;;
    "-q"|"--queue")
    qos="$2"
    shift
    ;;
    "-s"|"--speed")
    speed="$2"
    shift
    ;;
    "-t"|"--time")
    nsec="$2"
    shift
    ;;
    "--restraints")
    restrainres="$2"
    shift
    ;;
    "--production")
    prodonly=1
    ;;
    "--hmr")
    hmr=1
    ;;
    *)
    usage
    ;;
  esac
  shift
done

# Check for mandatory options
if [[ -z $rev || -z $rep || -z $name || -z $speed || -z $nsec ]]; then
    echo "ERROR: Missing a mandatory option"
    echo "       Do you have -r, -j, -s, -t, and -n ?"
    usage
fi

# Check prmtop (and inpcrd if needed) are valid files
pre=${prmtop%.prmtop}
if [[ ! -e $prmtop ]]; then
    echo "ERROR: Cannot find prmtop file: '$prmtop'"
    exit 1
fi

if [[ $prodonly -eq 0 && ! -e "${pre}.inpcrd" ]]; then
    echo "ERROR: Cannot find matching inpcrd file: '${pre}.inpcrd'"
    exit 1
fi

# Check queue selected is valid and set variables accordingly
if [[ "$qos" == "owners"  && "$prodonly" == "0" ]]; then
    echo "WARNING: Won't minimize or equilibrate on owners."
    echo "         Setting queue to rondror instead."
    qos="rondror"
fi

if [[ "$qos" == "rondror" || "$qos" == "rondor_high" ]]; then
    part="rondror"
    runtime=8
elif [[ "$qos" == "owners" ]]; then
    qos="normal"
    part="owners"
    runtime=48
elif [[ "$qos" == "shared" ]]; then
    qos="normal"
    part="gpu"
    runtime=48
else
    echo "ERROR: Invalid queue choice '$qos'" 
    usage
    exit 1
fi

# Calculate number of steps to run with given speed and queue jobstep size
if [[ $hmr == "0" ]]; then
    dt=0.0025
    heatwrite="ntpr=100, ntwr=10000, ntwx=1000,"
    eqwrite="ntpr=5000, ntwr=5000, ntwx=10000,"
    prodwrite="ntpr=25000, ntwr=80000, ntwx=80000,"
else
    dt=0.004
    heatwrite="ntpr=50, ntwr=5000, ntwx=500,"
    eqwrite="ntpr=3125, ntwr=3125, ntwx=6250,"
    prodwrite="ntpr=15625, ntwr=50000, ntwx=50000,"
fi

nstep=$(echo "scale=0; $runtime * $speed * 1000 / $dt / 24" | bc) # number of steps
stept=$(echo "scale=0; $runtime * $speed / 24" | bc ) # number of nanoseconds
nruns=$(echo $(printf %.0f $(echo "($nsec/$stept+ 0.5)/1" | bc -l))) # gross bc it needs to round up
if [[ "$nruns" -eq "0" ]]; then
    echo "ERROR: Submitting 0 runs? Something wrong"
    exit 1
fi
echo "INFO: Submitting $nruns jobsteps"

# Check for skeleton protocols in input files directory
# These should all be here if this script is properly configured
inpdir="/share/PI/rondror/software/submit_new/"
if [[ ! -e "$inpdir/minimization/PROTOCOL_skelly" || \
      ! -e "$inpdir/equilibration/PROTOCOL_skelly" || \
      ! -e "$inpdir/production/PROTOCOL_first_skelly" || \
      ! -e "$inpdir/production/PROTOCOL_continue_skelly" ]]; then
    echo "ERROR: Cannot find skeleton input files. Looked in:"
    echo "       $inpdir"
    exit 1
fi

echo "INFO: Using semi-isotropic boundary conditions"

# Restraints
if [[ ! -z "$restrainres" ]]; then
  restraint="ntr=1,\n  restraintmask=':${restrainres} \& !@H=',\n  restraint_wt=5.0,\n"
else
  restraint=""
fi

# Create directory structure if nonexistent
# Keep everything on scratch, and just a symlink to share
echo "Checking directory structure"
if [[ ! -d "$dir" ]]; then mkdir -p $dir; fi
if [[ ! -d "$dir/minimization/$rev" ]]; then mkdir -p "$dir/minimization/$rev"; fi
if [[ ! -d "$dir/equilibration/$rev" ]]; then mkdir -p "$dir/equilibration/$rev"; fi
if [[ ! -d "${dir/scratch/share}" ]]; then ln -s "$dir" "${dir/scratch/share}"; fi

# Make production replicate directories
for ((r=1;r<=$rep;r++)); do
  if [[ ! -d "${dir}/production/$rev/$r" ]]; then mkdir -p "${dir}/production/$rev/$r"; fi
done
echo "Ok"

# Check that the prmtop and inpcrd exist
echo "Checking for input files..."
prmtop="$dir/${pre}.prmtop"
inpcrd="$dir/${pre}.inpcrd"
#reference="$inpcrd"
if [[ ! -e "$prmtop" || ! -e "$inpcrd" ]]; then
    echo "ERROR: Cannot find prmtop/inpcrd! Names were:"
    echo "       $dir/$pre.prmtop"
    echo "       $dir/$pre.inpcrd" 
    exit 1
fi
echo "Ok"

# Check that the revisions won't overwrite anything
# Don't check for production files since they are auto-appended
echo "Checking for overwrites..."
if [[ $prodonly == "0" ]]; then
    if [[ -e "$dir/minimization/$rev/min1.mdout" || \
          -e "$dir/equilibration/$rev/Eq_1.mdout" ]]; then
        echo "ERROR: Output files found from revision $rev. Won't overwrite."
        exit 1
    fi
fi
echo "Ok"
# Reference is output of minimization
reference="${dir}/minimization/$rev/min3.rst"

# Create input files
# Use @ in sed separator because '/' is in some of these variables
if [[ $prodonly == "0" ]]; then
    echo "Creating jobs:"
    echo "Minimization..."
    sed -e "s@(REV)@$rev@g" \
        -e "s@(PRMTOP)@$prmtop@g" \
        -e "s@(INPCRD)@$inpcrd@g" \
        -e "s@(NAM)@$name@g" \
        -e "s@(NOW)@$(date)@g" \
        -e "s@(QOS)@$qos@g" \
        -e "s@(PART)@$part@g" \
        -e "s@(INP)@$inpdir/minimization@g" \
        -e "s@(DIR)@$dir@g" \
        -e "s@(WHOAMI)@$(whoami)@g" \
        -e "s@(REF)@$inpcrd@g" \
        < "$inpdir/minimization/PROTOCOL_skelly" > "$dir/minimization/$rev/PROTOCOL.sh"

    chmod +x "$dir/minimization/$rev/PROTOCOL.sh"
    cd "$dir/minimization/$rev"
    minjob=$(qsub "PROTOCOL.sh")
    cd -

    # EQUILIBRATION

    eqdir="$dir/equilibration/$rev"
    # Create heating mdin files. These are a bit different than other
    # equlibration files so do them separately
    # First is 12.5 ps, then second is 125 ps
    sed -e "s/(DT)/$dt/g" \
        -e "s/(HEATWRITE)/$heatwrite/g" \
        -e "s/(NSTEPS)/$(echo "scale=0; 12.5/$dt" | bc)/g" \
        < "$inpdir/equilibration/Heat_1.mdin" > "$eqdir/Heat_1.mdin"
    sed -e "s/(DT)/$dt/g" \
        -e "s/(HEATWRITE)/$heatwrite/g" \
        -e "s/(NSTEPS)/$(echo "scale=0; 125/$dt" | bc)/g" \
        < "$inpdir/equilibration/Heat_2.mdin" > "$eqdir/Heat_2.mdin"

    # Now do the equilibration mdin files, each is 2 ns
    cd "$inpdir/equilibration/"
    for i in $(ls Eq*mdin); do
        sed -e "s/(DT)/$dt/g" \
            -e "s/(EQWRITE)/$eqwrite/g" \
            -e "s/(NSTEPS)/$(echo "scale=0; 2000/$dt" | bc)/g" \
            < "$i" > "$eqdir/$i"
    done
    cd -

    # Equilibration
    echo "Equilibration..."
    cd $eqdir
    sed -e "s@(REV)@$rev@g" \
        -e "s@(PRMTOP)@$prmtop@g" \
        -e "s@(RST)@${dir}/minimization/$rev/min3.rst@g" \
        -e "s@(DIR)@$dir@g" \
        -e "s@(NAM)@$name@g" \
        -e "s@(NOW)@$(date)@g" \
        -e "s@(QOS)@$qos@g" \
        -e "s@(PART)@$part@g" \
        -e "s@(INP)@$eqdir@g" \
        -e "s@(MINNUM)@$minjob@g" \
        -e "s@(P2P)@$inpdir/gpuP2PCheck@" \
        -e "s@(WHOAMI)@$(whoami)@g" \
        -e "s@(REF)@$reference@g" \
        < "$inpdir/equilibration/PROTOCOL_skelly" > "$eqdir/PROTOCOL.sh"

    chmod +x "$dir/equilibration/$rev/PROTOCOL.sh"
    eqjob=$(qsub "PROTOCOL.sh")
    cd -
fi

# SET UP PRODUCTION RUNS 
prodir="$dir/production/$rev"

# Write settable variables in local copy of input files
# Use / as a separator here since there can be a '@' in restraint string
# Nsteps is for 5 ns of runtime in the production final equilibration
sed -e "s/(RESTRAINT)/$restraint/g" \
    -e "s/(NSTEPS)/$(echo "scale=0; 5000/$dt" | bc)/g" \
    -e "s/(DT)/$dt/g" \
    -e "s/(EQWRITE)/$eqwrite/g" \
    < "$inpdir/production/Eq_6.mdin" > "$prodir/Eq_6.mdin"

# Same thing for the production file, using calculated nsteps
# for the desired runtime
sed -e "s/(RESTRAINT)/$restraint/g" \
    -e "s/(NSTEPS)/$nstep/g" \
    -e "s/(DT)/$dt/g" \
    -e "s/(PRODWRITE)/$prodwrite/g" \
    < "$inpdir/production/Prod_skelly.mdin" > "$prodir/Prod_${runtime}h.mdin"

echo
echo "Created production input files in $prodir"
echo "Edit these files to your specification now."
echo "Press enter to continue"
read sheepity

# SUBMIT PRODUCTION RUNS

for ((r=1;r<=$rep;r++)); do
  # Initial production run
  # Check if it's been done yet
  if [[ "$prodonly" == "0" ]]; then
    depline="singleton,afterok:$eqjob"
  else
    depline="singleton"
  fi
  if [[ ! -f "$dir/production/$rev/$r/Prod_0.rst" ]]; then
    # Continue runs will be qsub'd after this one, and 
    # have singleton dependency so will run next.
      sed -e "s@(REV)@$rev@g" \
          -e "s@(PRMTOP)@$prmtop@g" \
          -e "s@(DIR)@$dir@g" \
          -e "s@(NAM)@$name@g" \
          -e "s@(NOW)@$(date)@g" \
          -e "s@(INP)@$prodir@g" \
          -e "s@(QOS)@$qos@g" \
          -e "s@(PART)@$part@g" \
          -e "s@(REP)@$r@g" \
          -e "s@(P2P)@$inpdir/gpuP2PCheck@g" \
          -e "s@(REFS)@$reference@g" \
          -e "s@(DEPS)@$depline@g" \
          -e "s@(WHOAMI)@$(whoami)@g" \
          -e "s@(RUNTIME)@$runtime@g" \
          -e "s@(REF)@$reference@g" \
          < "${inpdir}/production/PROTOCOL_first_skelly" > "$dir/production/$rev/$r/PROTOCOL_init.sh"

          cd "$dir/production/$rev/$r"
          chmod +x "PROTOCOL_init.sh"
          initprodjob=$(qsub "PROTOCOL_init.sh")
          depline=",afterany:$initprodjob"
          cd -
  else
          depline=""
  fi

  # Production echo "Production..."
  declare -a prodjob
    echo "  Replicate $r..."

    sed -e "s@(REV)@$rev@g" \
        -e "s@(PRMTOP)@$prmtop@g" \
        -e "s@(DIR)@$dir@g" \
        -e "s@(NAM)@$name@g" \
        -e "s@(NOW)@$(date)@g" \
        -e "s@(INP)@$prodir@g" \
        -e "s@(QOS)@$qos@g" \
        -e "s@(PART)@$part@g" \
        -e "s@(INIT)@$depline@g" \
        -e "s@(REP)@$r@g" \
        -e "s@(P2P)@$inpdir/gpuP2PCheck@g" \
        -e "s@(WHOAMI)@$(whoami)@g" \
        -e "s@(RUNTIME)@$runtime@g" \
        -e "s@(REF)@$reference@g" \
        < "${inpdir}/production/PROTOCOL_continue_skelly" > "$dir/production/$rev/$r/PROTOCOL.sh"

    chmod +x "$dir/production/$rev/$r/PROTOCOL.sh"
    # Submit appropriate number of singleton runs
    for ((i=0;i<$((nruns-1));i++)); do
      cd "$dir/production/$rev/$r"
      prodjob[$((rep*(r-1)+i))]=$(qsub "PROTOCOL.sh")
      cd -
    done

done
echo "Ok"

# Print a summary
echo
echo "---------- SUBMISSION SUMMARY ----------"
echo " NAME: $name"
if [[ $prodonly == "0" ]]; then
    echo " MINIMIZATION:"
    echo "    $minjob"
    echo " EQUILIBRATION: "
    echo "    $eqjob"
fi
echo " PRODUCTION:"
for j in ${initprodjobs[@]}; do
  echo "    $j"
done
for j in ${prodjob[@]}; do
  echo "    $j"
done
echo "----------------------------------------"


