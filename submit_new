#!/bin/bash

function usage {
  echo "Usage: $0 -r <revision> -d <directory> -p <prmtop>"
  echo "       -j <job name> -q <queue> -s <speed> -t <time>"
  echo "       -n <# replicates> [-c <inpcrd|rst>]"
  echo "       [--restraints <restraints>] [--production]"
  echo "       [--hmr|--slow] [--isotropic] [--msm <repnum>]"
  echo "       [--gpus <n>]"
  echo
  echo "The following flags are mandatory:"
  echo "  -r <revision> = Simulation revision to write"
  echo "  -p <prmtop> = Path to prmtop. Assumes inpcrd has same prefix"
  echo "  -j <job name> = Job name prefix, will be shown in squeue"
  echo "  -q <queue> = rondror | rondror_high | owners | shared"
  echo "  -s <speed> = Simulation speed, in ns/day"
  echo "  -t <time> = Total desired time, in ns"
  echo "  -n <# replicates> = Number of simulation replicates to start"
  echo
  echo "One of these pressure control flags must be specified:"
  echo "  --isotropic for isotropic pressure control"
  echo "  --anisotropic for anisotropic pressure control"
  echo "  --semiisotropic for semiisotropic pressure control"
  echo
  echo "The following flags are optional:"
  echo "  --production to submit new production runs only"
  echo "  --hmr for increased timestep"
  echo "  --slow for 2fs timestep"
  echo "  -c <inpcrd> = Input coordinates to use, if not default named"
  echo "  -d <directory> = Root directory of simulation. Defaults to \$PWD"
  echo "  --restraints <restraints> = Residues to restrain, comma or - separated"
  echo "  --temperature <temp> = Production temperature, in K. Defaults to 310"
  echo "  --resubmit to hook into resubmit script"
  echo "  --msm <rep> for MSM mode: no output, specify single replicate number."
  echo "  --gpus <n> for number of GPUs per simulation. Defaults to 1"
  echo "  --gentle-equilibration for 2fs equilibration timestep"
  echo "  --extra-production-options <string> = Extra options for production input file"
}
set -e
declare -a minjob
declare -a eqjob
declare -a prodjob # Global variable for all production jobs

# Starts minimization jobs
# $1 = replicate number
function start_minimization {

    if [[ $msm -eq 0 ]]; then
        r="$1" # Replicate number
    else
        r="$msm"
    fi
    mindir="$dir/minimization/$rev/$r"

    # Create input files with correct restrained residues
    cd "$inpdir/minimization"
    for i in $(ls *min.mdin); do
        eval sed $sedargs < "$i" > "$mindir/$i"
    done

    # Create protocol file
    eval \
    sed "-e \"s@(QOS)@$minqos@g\" \
         -e \"s@(PART)@$minpart@g\" \
         -e \"s@(REP)@$r@g\" \
         -e \"s@(INP)@$mindir@g\"" \
         $sedargs \
        < "$inpdir/minimization/PROTOCOL_skelly" > "$mindir/PROTOCOL.sh"

    chmod +x -f "$mindir/PROTOCOL.sh"
    cd "$mindir"
    minjob+=($(sbatch "PROTOCOL.sh" | awk '{print $4}'))
    cd - > /dev/null

    return 0
}

# Starts equilibration jobs
# $1 = replicate number
# $2 = minimization job id, if started
function start_equilibration {

    # Set up directory structure for equilibration
    if [[ $msm -eq 0 ]]; then
        r="$1"
    else # MSM case gets an equilibration for this replicate too
        r="$msm"
    fi
    eqdir="$dir/equilibration/$rev/$r"
    minjob="$2"

    # Create heating mdin files. These are a bit different than other
    # equlibration files so do them separately
    # First is 12.5 ps, then second is 125 ps
    eval \
    sed "-e \"s/(HEATWRITE)/$heatwrite/g\" \
         -e \"s/(NSTEPS)/$(echo "scale=0; 12.5/$dt" | bc)/g\"" \
        $sedargs \
        < "$inpdir/equilibration/Heat_1.mdin" > "$eqdir/Heat_1.mdin"

    eval \
    sed "-e \"s/(HEATWRITE)/$heatwrite/g\" \
         -e \"s/(NSTEPS)/$(echo "scale=0; 125/$dt" | bc)/g\"" \
        $sedargs \
        < "$inpdir/equilibration/Heat_2.mdin" > "$eqdir/Heat_2.mdin"

    # Now do the equilibration mdin files, each is 2 ns
    # Weights go from 5,4,3,2,1 as equilibration number increases
    cd "$inpdir/equilibration/"
    for ((i=0; i<${#eqrsts[@]}; i++)); do
        eqnam="$(printf $eqdir/Eq_%02d.mdin $((i+1)))"
        eval \
        sed "-e \"s/(EQWRITE)/$eqwrite/g\" \
             -e \"s/(NSTEPS)/$(echo "scale=0; 2000/$eqdt" | bc)/g\" \
             -e \"s/(WEIGHT)/${eqrsts[i]}/g\"" \
            $sedargs \
            < "$inpdir/equilibration/Eq_skelly.mdin" > "$eqnam"
    done
    cd - > /dev/null

    # Equilibration
    cd $eqdir
    if [[ $msm -eq 0 ]]; then
        echo "Equilibration..."
    fi

    eval \
    sed "-e \"s@(MINNUM)@$minjob@g\" \
         -e \"s@(RST)@$mindir/min_3.rst@g\" \
         -e \"s@(QOS)@$minqos@g\" \
         -e \"s@(PART)@$minpart@g\" \
         -e \"s@(REP)@$r@g\" \
         -e \"s@(INP)@$eqdir@g\" \
         -e \"s@(RUNTIME)@$eqtime@g\"" \
         $sedargs \
        < "$inpdir/equilibration/PROTOCOL_skelly" > "$eqdir/PROTOCOL.sh"

    chmod +x -f "$eqdir/PROTOCOL.sh"
    eqid=$(sbatch "PROTOCOL.sh" | awk '{print $4}')
    eqjob+=($eqid)
    cd - > /dev/null
    return 0
}

# Starts production jobs
# $1 = replicate number
# $2 = equilibration job id, if started
function start_production {
  if [[ $msm -eq 0 ]]; then
      echo "Replicate: $1"
  fi
  r="$1"
  depjob="$2"

  eqdir="${prodir/production/equilibration}/$r"

  # If starting production jobs only, verify equilibration completed
  # if inpcrd doesn't contain velocity information
  if [[ $prodonly -eq 1 && $inpcrd != *"rst"* && ! -f $eqdir/Eq_final.rst ]]
  then
      echo "  Resubmitting equilibration"
      cd $eqdir

      if [[ -f "PROTOCOL.sh" ]]; then
          depjob=$(sbatch "PROTOCOL.sh" | awk '{print $4}')
      else
          echo "  Writing missing protocol file"
          start_equilibration $r
          depjob=$eqid
      fi
      cd - > /dev/null
  fi

  if [[ -z $depjob ]]; then
    depline="singleton"
  else
    depline="singleton,afterok:$depjob"
  fi
    if [[ $msm -eq 0 ]]; then
        echo "  Replicate $r..."
    fi

    # Again, a mix of sed delimiters here because may have atomsels with @
    eval \
    sed "-e \"s@(EQDIR)@$eqdir@g\" \
         -e \"s@(INP)@$prodir@g\" \
         -e \"s@(QOS)@$qos@g\" \
         -e \"s@(PART)@$part@g\" \
         -e \"s@(REP)@$r@g\" \
         -e \"s@(RUNTIME)@$runtime@g\"" \
         $sedargs \
        < "${inpdir}/production/PROTOCOL_skelly" > "$dir/production/$rev/$r/PROTOCOL.sh"

    chmod +x -f "$dir/production/$rev/$r/PROTOCOL.sh"

    # Submit appropriate number of singleton runs as a big job array
    cd "$dir/production/$rev/$r"
    prodjob+=($(sbatch --dependency="$depline" \
                       --array="1-${nruns}%1" \
                       "PROTOCOL.sh" | awk '{print $4}'))
    sleep 0.5
    cd - > /dev/null

    if [[ "$resubmit" == 1 ]]; then
        echo "Adding to resubmit queue..."
        if [[ "$prodonly" == "1" ]]; then
            /usr/bin/env python $PI_HOME/software/resubmit/resubmit.py -u \
               "$dir/production/$rev/$r/mdinfo" \
               "$dir/production/$rev/$r/PROTOCOL.sh" \
               "$nsec"
        else
            /usr/bin/env python $PI_HOME/software/resubmit/resubmit.py \
               "$dir/production/$rev/$r/mdinfo" \
               "$dir/production/$rev/$r/PROTOCOL.sh" \
               "$nsec"
        fi
    fi

    return 0
}

# Set default options
rev=""
prmtop=""
inpcrd=""
name=""
qos=""
speed=""
nsec=""
rep=""
restraints=""
dir="$PWD"
prodonly=0
hmr=0
pressure=""
resubmit=0
msm=0
ngpus=1
gentleq=0
temperature="310.0"

# Parse input arguments
while [[ "$#" > 0 ]]; do
  key="$1"
  case $key in
    "-r"|"--revision")
    rev="$2"
    shift
    ;;
    "-d"|"--directory")
    dir="$2"
    shift
    ;;
    "-p"|"--prmtop")
    prmtop="$2"
    shift
    ;;
    "-c"|"--inpcrd")
    inpcrd="$2"
    shift
    ;;
    "-j"|"--name")
    name="$2"
    shift
    ;;
    "-n"|"--nrep")
    rep="$2"
    shift
    ;;
    "-q"|"--queue")
    qos="$2"
    shift
    ;;
    "-s"|"--speed")
    speed="$2"
    shift
    ;;
    "-t"|"--time")
    nsec="$2"
    shift
    ;;
    "--temperature")
    temperature="$2"
    shift
    ;;
    "--restraints")
    restrainres="$2"
    shift
    ;;
    "--production")
    prodonly=1
    ;;
    "--hmr")
    hmr=1
    ;;
    "--slow")
    hmr=2
    ;;
    "--semiisotropic")
    pressure="ntp=3, csurften=3, gamma_ten=0.,"
    ;;
    "--isotropic")
    pressure="ntp=1,"
    ;;
    "--anisotropic")
    pressure="ntp=2,"
    ;;
    "--resubmit")
    resubmit=1
    ;;
    "--msm")
    msm="$2"
    shift
    ;;
    "--gpus")
    ngpus="$2"
    shift
    ;;
    "--gentle-equilibration")
    gentleq=1
    ;;
    "--extra-production-options")
    extraopts="$2"
    shift
    ;;
    *)
    usage
    exit 1
    ;;
  esac
  shift
done

# Sanity check for msm and rep
if [[ $msm -ne 0 ]]; then
    if [[ ! -z $rep ]]; then
        echo "WARNING: Cannot specify msm mode and number of replicates"
        echo "         Ignoring replicate number"
    fi
    rep=$msm
fi

# Check for mandatory options
if [[ -z $rev || -z $rep || -z $name || -z $speed || -z $nsec ]]; then
    usage
    echo -e "\nERROR: Missing a mandatory option"
    exit 1
fi

if [[ -z $pressure ]]; then
    usage
    echo "ERROR: Missing a pressure options"
    echo "       You need to state which pressure control to use"
    exit 1
fi

# Check prmtop (and inpcrd if needed) are valid files
if [[ -z "$inpcrd" ]]; then
    inpcrd=${prmtop%.prmtop}.inpcrd
fi

if [[ ! -e "$prmtop" ]]; then
    echo "ERROR: Cannot find prmtop file: '$prmtop'"
    exit 1
fi
prmtop=$(readlink -m $prmtop)
inpcrd=$(readlink -m $inpcrd)

if [[ $prodonly -eq 0 && ! -e "$inpcrd" ]]; then
    echo "ERROR: Cannot find inpcrd file: '$inpcrd'"
    exit 1
fi

if [[ $prodonly -eq 1 && $inpcrd == *".rst" ]]; then
    echo "Starting new production runs with velocites from '$inpcrd'"
fi

# Set runtime and QOS according to allowed runtime
if [[ "$qos" == "rondror" ]]; then
    part="rondror"
    qos="normal"
    runtime=8
elif [[ "$qos" == "rondror_high" ]]; then
    qos="high_p"
    part="rondror"
    runtime=8
elif [[ "$qos" == "owners" ]]; then
    qos="normal"
    part="owners"
    runtime=48
elif [[ "$qos" == "shared" ]]; then
    qos="normal"
    part="gpu"
    runtime=48
else
    echo "ERROR: Invalid queue choice '$qos'"
    usage
    exit 1
fi

# Set the queue for minimization
minpart="$part"
minqos="$qos"
if [[ "$part" == "owners" ]]; then
    minpart="rondror"
    if [[ $SHERLOCK == 2 ]]; then
        minqos="normal"
    else
        minqos="rondror_high"
    fi
fi

# Set the equilibration time depending on the number of GPUs
if [[ $ngpus == 1 ]]; then
    eqtime=12
else
    eqtime=8
fi

# Remove write permissions from prmtop and input coordinates
chmod a-w -f "$prmtop"
chmod a-w -f "$inpcrd"

# Calculate number of steps to run with given speed and queue jobstep size
if [[ $hmr == "0" ]]; then
    dt=0.0025
    eqdt=0.0025
    heatwrite="ntpr=100, ntwr=10000, ntwx=1000,"
    eqwrite="ntpr=5000, ntwr=50000, ntwx=10000,"
    prodwrite="ntpr=25000, ntwr=80000, ntwx=80000,"
elif [[ $hmr == "1" ]]; then
    dt=0.004
    eqdt=0.004
    heatwrite="ntpr=50, ntwr=5000, ntwx=500,"
    eqwrite="ntpr=3125, ntwr=31250, ntwx=6250,"
    prodwrite="ntpr=15625, ntwr=50000, ntwx=50000,"
elif [[ $hmr == "2" ]]; then
    dt=0.002
    eqdt=0.002
    heatwrite="ntpr=100, ntwr=10000, ntwx=1000,"
    eqwrite="ntpr=6250, ntwr=62500, ntwx=12500,"
    prodwrite="ntpr=31250, ntwr=100000, ntwx=100000,"
fi

# Set timesteps differently for gentle equilibration
# Also increase the runtime
if [[ $gentleq == 1 ]]; then
    eqtime=16
    eqdt=0.002
    heatwrite="ntpr=100, ntwr=10000, ntwx=1000,"
    eqwrite="ntpr=6250, ntwr=62500, ntwx=12500,"
    eqrsts=(5.0 4.0 3.0 2.0 1.0 0.9 0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1)
else
    eqrsts=(5.0 4.0 3.0 2.0 1.0)
fi

nstep=$(echo "scale=0; $runtime * $speed * 1000 / $dt / 24" | bc) # number of steps
stept=$(echo "scale=0; $runtime * $speed / 24" | bc ) # number of nanoseconds
if [[ "$resubmit" == "1" ]]; then
    nruns=5
else
    # Need to round up number of runs
    nruns=$(echo $(printf %.0f $(echo "($nsec/$stept+ 0.5)/1" | bc -l)))
fi
if [[ "$nruns" -eq "0" ]]; then
    echo "ERROR: Submitting 0 runs? Something wrong"
    exit 1
fi

if [[ $msm -eq 0 ]]; then
    echo "INFO: Submitting $nruns jobsteps"
fi

# Check for skeleton protocols in input files directory
# These should all be here if this script is properly configured
inpdir="$PI_HOME/software/submit_new/"
if [[ ! -e "$inpdir/minimization/PROTOCOL_skelly" || \
      ! -e "$inpdir/equilibration/PROTOCOL_skelly" || \
      ! -e "$inpdir/production/PROTOCOL_skelly" ]]; then
    echo "ERROR: Cannot find skeleton input files. Looked in:"
    echo "       $inpdir"
    exit 1
fi

# Restraints
if [[ ! -z "$restrainres" ]]; then
  restraint="ntr=1,\n  restraintmask=':${restrainres} \& !@H=',\n  restraint_wt=5.0,\n"
else
  restraint=""
fi

# Obtain restraint syntax for water, ions, lipids
resnameargs="$($inpdir/get_residue_names.py "$prmtop")"

# Accumulate sed arguments common to all files
# These vary in sed delimiter because @ or / can be in some variables.
sedargs="-e \"s/(DT)/$dt/g\" \
         -e \"s/(EQDT)/$eqdt/g\" \
         -e \"s/(PRESSURE)/$pressure/g\" \
         -e \"s@(PRMTOP)@$prmtop@g\" \
         -e \"s@(REV)@$rev@g\" \
         -e \"s@(NOW)@$(date)@g\" \
         -e \"s@(WHOAMI)@$(whoami)@g\" \
         -e \"s@(DIR)@$dir@g\" \
         -e \"s@(FUNFILE)@$inpdir/functions@g\" \
         -e \"s@(GPUS)@$ngpus@g\" \
         -e \"s@(P2P)@$inpdir/gpuP2PCheck@\" \
         -e \"s/(RESTRAINT)/$restraint/g\" \
         -e \"s@(NAM)@$name@g\" \
         -e \"s@(REF)@$inpcrd@g\" \
         -e \"s@(INPCRD)@$inpcrd@g\" \
         -e \"s@(TEMPK)@$temperature@g\"
         $resnameargs"

# Create directory structure if nonexistent
# Keep everything on scratch, and just a symlink to share
if [[ $msm -eq 0 ]]; then
    echo "Checking directory structure"
fi
if [[ ! -d "$dir" ]]; then mkdir -p $dir; fi

# Make production replicate directories
if [[ $msm -eq 0 ]]; then
    for ((r=1;r<=$rep;r++)); do
      if [[ ! -d "${dir}/production/$rev/$r" ]]; then mkdir -p "${dir}/production/$rev/$r"; fi
      if [[ ! -d "$dir/minimization/$rev/$r" ]]; then mkdir -p "$dir/minimization/$rev/$r"; fi
      if [[ ! -d "$dir/equilibration/$rev/$r" ]]; then mkdir -p "$dir/equilibration/$rev/$r"; fi
    done
    echo "Ok"
    echo "Checking for overwrites..."
else
    if [[ ! -d "${dir}/minimization/$rev/$msm" ]]; then mkdir -p "${dir}/minimization/$rev/$msm"; fi
    if [[ ! -d "${dir}/equilibration/$rev/$msm" ]]; then mkdir -p "${dir}/equilibration/$rev/$msm"; fi
    if [[ ! -d "${dir}/production/$rev/$msm" ]]; then mkdir -p "${dir}/production/$rev/$msm"; fi
fi

# Check that the revisions won't overwrite anything
# Don't check for production files since they are auto-appended
if [[ $prodonly == "0" ]]; then
    if [[ $msm -eq 0 ]]; then
        if [[ -e "$dir/minimization/$rev/1/min1.mdout" || \
              -e "$dir/equilibration/$rev/1/Eq_1.mdout" ]]; then
            echo "ERROR: Output files found from revision $rev. Won't overwrite."
            exit 1
        fi
    else
        if [[ -e "$dir/minimization/$rev/$msm/min1.mdout" || \
              -e "$dir/equilibration/$rev/$msm/Eq_1.mdout" ]]; then
            echo "ERROR: Output files from revision $rev, rep $msm. Won't overwrite."
            exit 1
        fi
    fi
# If starting new replicates with velocites, symlink restart and associated
# output files so that production run starts from there.
elif [[ $inpcrd == *".rst" ]]; then
    rstpath=$(readlink -f "$inpcrd")
    echo "Making symlinks to previous run at $rstpath"
    if [[ ! -e ${rstpath%.rst}.nc || ! -e ${rstpath%.rst}.mdout ]]; then
        echo "ERROR: Specifying a restart and --production, but restart"
        echo "       does not have a matching mdout and nc"
        exit 1
    fi
    for ((r=1; r<=$rep; r++)); do
        ln -s "$rstpath" "$dir/production/$rev/$r/Eq_unrestrained.rst"
        ln -s "${rstpath%.rst}.nc" "$dir/production/$rev/$r/Eq_unrestrained.nc"
        ln -s "${rstpath%.rst}.mdout" "$dir/production/$rev/$r/Eq_unrestrained.mdout"
    done
fi

if [[ $msm -eq 0 ]]; then
    echo "Ok"
fi

# SET UP PRODUCTION RUNS
prodir="$dir/production/$rev"

# Write settable variables in local copy of input files
# Use / as a separator here since there can be a '@' in restraint string
# Nsteps is for 5 ns of runtime in the production final equilibration
if [[ ! -f $prodir/Eq_unrestrained.mdin ]]; then
    eval \
    sed "-e \"s/(NSTEPS)/$(echo "scale=0; 5000/$eqdt" | bc)/g\" \
         -e \"s/(EQWRITE)/$eqwrite/g\"" \
        $sedargs \
        < "$inpdir/production/Eq_unrestrained.mdin" > "$prodir/Eq_unrestrained.mdin"
else
    echo "Using existing Eq_unrestrained.mdin"
fi

# Same thing for the production file, using calculated nsteps
# for the desired runtime
if [[ ! -f $prodir/Prod_${runtime}h.mdin ]]; then
    eval \
    "sed -e \"s/(NSTEPS)/$nstep/g\" \
         -e \"s/(PRODWRITE)/$prodwrite/g\" \
         -e \"s/(EXTRAOPTS)/$extraopts/g\"" \
         $sedargs \
        < "$inpdir/production/Prod_skelly.mdin" > "$prodir/Prod_${runtime}h.mdin"
else
    echo "Using existing Prod_${runtime}h.mdin"
fi

if [[ $msm -eq 0 ]]; then
    echo
    echo "Created production input files in $prodir"
    echo "Edit these files to your specification now."
    echo "Press enter to continue"
    read sheepity
fi

# SUBMIT ALL RUNS
if [[ $msm -eq 0 ]]; then
    echo "Not msming.. submitting $rep replicates"
    for ((x=1; x<=$rep; x++)); do
        echo " On $x"
        if [[ $prodonly -eq 0 ]]; then
            start_minimization $x
            start_equilibration $x ${minjob[${#minjob[@]}-1]}
            start_production $x ${eqjob[${#eqjob[@]}-1]}
        else
            start_production $x
        fi
    done
else
    start_minimization $msm
    start_equilibration $msm ${minjob[${#minjob[@]}-1]}
    start_production $msm ${eqjob[${#eqjob[@]}-1]}
fi

if [[ $msm -eq 0 ]]; then
    echo "Ok"

    # Print a summary
    echo
    echo "---------- SUBMISSION SUMMARY ----------"
    echo " NAME: $name"
    if [[ $prodonly == "0" ]]; then
        echo " MINIMIZATION:"
        for j in ${minjob[@]}; do
            echo "    $j"
        done
        echo " EQUILIBRATION: "
        for j in ${eqjob[@]}; do
            echo "    $j"
        done
    fi
    echo " PRODUCTION:"
    for j in ${prodjob[@]}; do
      echo "    $j"
    done
    echo "----------------------------------------"
else
    for j in ${prodjob[@]}; do
        echo "$j"
    done
fi

