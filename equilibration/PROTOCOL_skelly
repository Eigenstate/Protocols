#!/bin/bash
#SBATCH --time=08:00:00
#SBATCH --partition=(PART)
#SBATCH --qos=(QOS) --gres=gpu:2
#SBATCH --constraint="titanx"
#SBATCH --ntasks-per-socket=2 --tasks=2
#SBATCH --gres-flags=enforce-binding
#SBATCH --output=(REV)slurm.out --open-mode=append
#SBATCH --mail-user=(WHOAMI)@stanford.edu --mail-type=END,FAIL
#SBATCH --job-name=(NAM)_eq
# If you want to run after a minimization is done, uncomment this
# and put in the job number at the end.
#SBATCH --dependency=afterok:(MINNUM)
#
#=====================================================================
#                            PROTOCOL(REV)
#=====================================================================
# GOAL   : Equilibrate the system at 310K after heating
#        
# INPUTS :  
# OUTPUT : Equilibrated system 
# PROJECT: (NAM)
# PATH   : DIR
# DATE   : NOW
#=====================================================================
#

# Protocol revision number
rev=(REV)

# Output from minimization, should be prmtop and min.rst or something
prmtop="(PRMTOP)"
rst="(RST)"
ref="(REF)"

# Directory with input files
inpdir="(INP)"
cd "$inpdir"

# Exit if any command fails
set -e

# Load necessary modules
echo "$(date) on machine $(hostname)"
source "/share/PI/rondror/software/amber_dev/setup_amber.sh"

# Check for P2P GPUs. Fail if not
p2p=$((P2P))
if [[ "$p2p" == *"NO"* ]]; then
  echo "ERROR! Didn't get P2P GPUs!"
  echo "HOSTNAME             = $HOSTNAME"
  echo "CUDA VISIBLE DEVICES = $CUDA_VISIBLE_DEVICES"
  exit 1
fi

# Source the common run functions
. (FUNFILE)

# Heat from 0 to 100K with restraints 10 on the lipid and protein for 12.5ps
# in the NVT ensemble, 2.5fs timsetep
if [[ ! -f "Heat_1.rst" ]]; then
    echo "NVT heating... of $SLURM_JOB_NAME"
    run_md "Heat_1" "$rst"
fi

# Heat again from 100 to 310K with restraints 10 on the lipid and protein for
# 125ps in NTP ensemble, 2.5fs timestep
if [[ ! -f "Heat_2.rst" ]]; then
    echo "NTP heating...of $SLURM_JOB_NAME"
    check_previous "Heat_1.mdout" "Heat_1"
    run_md "Heat_2" "Heat_1.rst"
fi

# Equilibrate with restraint 5 on protein only for 2ns
# in the NPT ensemble, 2.5fs timestep
if [[ ! -f "Eq_1.rst" ]]; then
    echo "Restraint 5 equilibration...of $SLURM_JOB_NAME"
    check_previous "Heat_2.mdout" "Heat_2"
    run_md "Eq_1" "Heat_2.rst"
fi

# Decrease restraint on protein to 4 for 2ns
# in the NPT ensemble, 2.5fs timestep
if [[ ! -f "Eq_2.rst" ]]; then
    echo "Restraint 4 equilibration...of $SLURM_JOB_NAME"
    check_previous "Eq_1.mdout" "Eq_1"
    run_md "Eq_2" "Eq_1.rst"
fi

# Decrease restraint on protein to 3 for 2ns
# in the NPT ensemble, 2.5fs timestep
if [[ ! -f "Eq_3.rst" ]]; then
    echo "Restraint 3 equilibration...of $SLURM_JOB_NAME"
    check_previous "Eq_2.mdout" "Eq_2"
    run_md "Eq_3" "Eq_2.rst"
fi

# Decrease restraint on protein to 2 for 2ns
# in the NPT ensemble, 2.5fs timestep
if [[ ! -f "Eq_4.rst" ]]; then
    echo "Restraint 2 equilibration...of $SLURM_JOB_NAME"
    check_previous "Eq_3.mdout" "Eq_3"
    run_md "Eq_4" "Eq_3.rst"
fi

# Decrease restraint on protein to 1 for 2ns
# in the NPT ensemble, 2.5fs timestep
if [[ ! -f "Eq_5.rst" ]]; then
    echo "Restraint 1 equilibration...of $SLURM_JOB_NAME"
    check_previous "Eq_4.mdout" "Eq_4"
    run_md "Eq_5" "Eq_4.rst"
fi

# No-restraint equilibration now done at beginning of production run
# Ensure the last equilibration completed successfully before quitting
check_previous "Eq_5.mdout" "Eq_5"

# Total of 10ns equilibration now performed.
# Relevant output files are the .nc trajectories for analysis
# and the Eq_6.rst for use in production simulations
echo "Done with equilibration of: $SLURM_JOB_NAME"
date
