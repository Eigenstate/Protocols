#!/bin/bash
#SBATCH --time=(RUNTIME):00:00
#SBATCH --partition=(PART)
#SBATCH --qos=(QOS)
#SBATCH --ntasks-per-socket=(GPUS) --gres=gpu:(GPUS) --tasks=(GPUS)
#SBATCH --constraint="GPU_SKU:TITAN_Xp|GPU_SKU:TITAN_X"
#SBATCH --mem=1GB
#SBATCH --output=(REV)slurm.out --open-mode=append
##SBATCH --mail-user=(WHOAMI)@stanford.edu --mail-type=FAIL
#SBATCH --job-name=(NAM)_eq_(REP)
# If you want to run after a minimization is done, uncomment this
# and put in the job number at the end.
#SBATCH --dependency=afterok:(MINNUM),singleton
#
#=====================================================================
#                            PROTOCOL(REV)
#=====================================================================
# GOAL   : Equilibrate the system at 310K after heating
#
# INPUTS :
# OUTPUT : Equilibrated system
# PROJECT: (NAM)
# PATH   : DIR
# DATE   : NOW
#=====================================================================
#

# Protocol revision number
rev=(REV)

# Output from minimization, should be prmtop and min.rst or something
prmtop="(PRMTOP)"
rst="(RST)"
ref="(REF)"

# Directory with input files
inpdir="(INP)"
cd "$inpdir"

# Exit if any command fails
set -e

# Load necessary modules
source "$PI_HOME/software/amber_dev/setup_amber.sh"

# Source the common run functions
. (FUNFILE)
print_node_jobs

# Check for P2P GPUs. Fail if not
if [[ "$SLURM_NTASKS_PER_SOCKET" -gt 1 ]]; then
    p2p=$((P2P))
    if [[ "$p2p" == *"NO"* ]]; then
      echo "ERROR! Didn't get P2P GPUs!"
      echo "HOSTNAME             = $HOSTNAME"
      echo "CUDA VISIBLE DEVICES = $CUDA_VISIBLE_DEVICES"
      exit 1
    fi
fi

# Heat from 0 to 100K with restraints 10 on the lipid and protein for 12.5ps
# in the NVT ensemble, 2.5fs timsetep
if [[ ! -f "Heat_1.rst" ]]; then
    echo "NVT heating... of $SLURM_JOB_NAME"
    run_md "Heat_1" "$rst"
fi

# Heat again from 100 to 310K with restraints 10 on the lipid and protein for
# 125ps in NTP ensemble, 2.5fs timestep
if [[ ! -f "Heat_2.rst" ]]; then
    echo "NTP heating...of $SLURM_JOB_NAME"
    check_previous "Heat_1.mdout" "Heat_1"
    run_md "Heat_2" "Heat_1.rst"
fi

# Loop through all available equilibration input files
# This allows flexibility for many equilibration scenarios
# Since I have set -e, any errors will kill this run and abort the loop
for inpfile in $(ls Eq_*.mdin | sort); do
    # Get run number inpfile      Eq_02.mdin
    eqnum=${inpfile%.mdin};     # Eq_02
    eqnum=${eqnum#Eq_}          # 02
    eqint=$((10#$eqnum))        # 2 (for arithmetic comparisons)

    # If run already done, go to next input file
    if [[ -f "Eq_${eqnum}.rst" ]]; then
        continue
    fi

    # Determine previous run name
    if [[ $eqint -eq 1 ]]; then
        prevrun="Heat_2"
    else
        prevrun="$(printf Eq_%02d $((eqint-1)))"
    fi

    # Check input data are valid and run the simulation
    echo "Running equilibration #$eqnum of $SLURM_JOB_NAME"
    check_previous "${prevrun}.mdout" "$prevrun"
    run_md "Eq_${eqnum}" "${prevrun}.rst"
done

# Now symlink the final equilibration rst so that the production
# jobs can find it regardless of the number of equilibration steps
for ext in "rst" "nc" "mdout"; do
    ln -s "Eq_${eqnum}.${ext}" "Eq_final.${ext}"
done

echo "Done with equilibration of: $SLURM_JOB_NAME"
date
